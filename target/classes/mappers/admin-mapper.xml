<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0/EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="adminMapper">


	<!-- 관리자 등록 -->
	<insert id="insertAdmin">
		insert into ADMIN
		values (#{id},#{pwd},#{name})
	</insert>

	<!-- 아이디 중복확인 -->
	<select id="adminCount" resultType="_int">
		select count(*)
		from admin
		where admin_id = #{id}
	</select>


	<!-- 회원 리스트 -->
	<select id="selectMember" resultMap="memberResultSet">
		select *
		from member
	</select>


	<!-- 회원 리절트맵 -->
	<resultMap type="Member" id="memberResultSet">
		<id column="EMAIL_ID" property="email" />
		<result column="USER_PWD" property="pwd" />
		<result column="USER_NAME" property="name" />
		<result column="NICKNAME" property="nickName" />
		<result column="PHONE" property="phone" />
		<result column="BIRTH_DATE" property="birthday" />
		<result column="GENDER" property="gender" />
		<result column="MEMBER_STATUS" property="status" />
		<result column="CREATE_DATE" property="createDate" />
		<result column="MODIFY_DATE" property="modifyDate" />
		<result column="ADDRESS" property="address" />
		<result column="POINT" property="point" />
		<result column="FLAVOR1" property="radio3" />
		<result column="FLAVOR2" property="radio4" />
		<result column="FLAVOR3" property="radio5" />
		<result column="REPORT_COUNT" property="reportCount" />
		<result column="PROFILE_PATH" property="profilePath" />
		<result column="ORIGIN_NAME" property="originName" />
		<result column="CHANGE_NAME" property="changeName" />
		<result column="LOGIN_TYPE" property="loginType" />
	</resultMap>

	<!--관리자 리절트맵 -->
	<resultMap type="Admin" id="adminResultSet">
		<id column="admin_id" property="id" />
		<result column="admin_pwd" property="pwd" />
		<result column="admin_name" property="name" />
	</resultMap>

	<!-- 회원-상태 변경 -->
	<update id="updateMember">
		update member
		set
		<if test="checked == 'true'">
			member_status = 'Y'
		</if>
		<if test="checked == 'false'">
			member_status = 'N'
		</if>
		where email_id = #{email}
	</update>

	<!-- 회원 리스트 총 명 수 -->
	<select id="memberCount" resultType="_int">
		select count(*)
		from member
	</select>

	<!-- 회원 검색 -->
	<select id="searchMember" resultMap="memberResultSet">
		select * from
		member where
		email_id like '%'||#{search}||'%' or user_name like
		'%'||#{search}||'%'
	</select>
	<!-- 회원 검색 검색 총 명 수 -->
	<select id="searchCount" resultType="_int">
		select count(*) from
		member
		where email_id like '%'||#{search}||'%' or user_name like
		'%'||#{search}||'%'
	</select>

	<!--관리자 로그인 -->
	<select id="selectAdmin" resultMap="adminResultSet">
		select * from admin
		where
		admin_id = #{id} and admin_pwd = #{pwd}
	</select>



	<!-- 상품 테이블 등록 및 상품 게시판 테이블 등록 -->
	<insert id="registerProduct" statementType="CALLABLE">
		{#{result, mode=OUT,
		jdbcType=INTEGER} = call insertproductfn(#{product.productName},
		#{product.productPrice}, #{product.productStock},
		#{product.productOneLine},
		#{product.productType},
		#{product.boardContent}, #{product.adminId})}
	</insert>



	<!-- insert all (함수를 생성해서 불러와야하는데 실패. 시간날때 재도전) -->
	<!-- <insert id="registerProductImage" statementType="CALLABLE"> -->
	<!-- <foreach item="item" collection="list" index="index" open="INSERT ALL" close="select * from dual"> -->
	<!-- into image values -->
	<!-- (get_seq_ino('seq_ino'), #{item.changeName}, #{item.originName}, #{item.filePath}, default, #{item.fileLevel}, #{item.fileType}, #{item.boardType}, #{item.identifyNo}) -->
	<!-- </foreach> -->

	<!-- </insert> -->

	<!-- 상품 이미지 등록 -->
	<!-- union all 방식 -->
	<insert id="registerProductImage">
		insert into image
		<choose>
			<when test='identifyNo == 0'>
				select seq_ino.nextval, A.*, seq_pid.currval from(
				<foreach item="item" collection="list" index="index" separator="union all">
					select #{item.changeName} as CHANGE_NAME,
					#{item.originName} as ORIGIN_NAME,
					#{item.filePath} as FILE_PATH,
					sysdate as UPLOAD_DATE,
					#{item.fileLevel} as FILE_LEVEL,
					#{item.fileType} as FILE_TYPE,
					#{item.boardType} as BOARD_TYPE
					from dual
				</foreach>
				) A
			</when>
			<otherwise>
				select seq_ino.nextval, A.* from(
				<foreach item="item" collection="list" index="index" separator="union all">
					select #{item.changeName} as CHANGE_NAME,
					#{item.originName} as ORIGIN_NAME,
					#{item.filePath} as FILE_PATH,
					sysdate as UPLOAD_DATE,
					#{item.fileLevel} as FILE_LEVEL,
					#{item.fileType} as FILE_TYPE,
					#{item.boardType} as BOARD_TYPE,
					#{item.identifyNo} as IDENTIFY_NO
					from dual
				</foreach>
				) A
			</otherwise>
		</choose>
	</insert>

	<!-- 상품리스트 전체 수량 조회 -->
	<select id="getListCount" resultType="_int">
		<choose>
			<when test="table.equals('applyTaste')">
				select count(*)
				from apply_t
			</when>
			<when test="table.equals('tasteBoardAdmin')">
				select count(*)
				from taste_board
				where admin_status = 'Y'
			</when>
			<when test="table.equals('tasteBoard')">
				select count(*)
				from taste_board
				where board_status = 'Y'
			</when>
			<when test="table.equals('pListAdmin')">
				select count(*)
				from pList
				where product_status = 'Y'
			</when>
			<when test="table.equals('pListBoard')">
				select count(*)
				from pList
				where board_status = 'Y'
			</when>
			<when test="table.equals('productRequest')">
				select count(*)
				from product_request
			</when>
		</choose>
	</select>

	<!-- 상품 리스트 조회 -->
	<select id="getProductList" resultMap="productResultSet">
	
			select *
			from plist
			<if test='boardCheck == false'>
			where product_status = 'Y'
			</if>
			<if test='boardCheck == true'>
			where board_status = 'Y'
			</if>
			
			<if test='value == null or value.equals("productNo")'>
			order by product_no desc
			</if>
			<if test='value != null and value.equals("productName")'>
			order by product_name asc
			</if>
			<if test='value != null and value.equals("productStock")'>
			order by product_Stock desc
			</if>
			<if test='value != null and value.equals("reviewCount")'>
			order by review_count desc
			</if>
			<if test='value != null and value.equals("scrapCount")'>
			order by scrap_count desc
			</if>
			
			
			
	</select>

	<resultMap type="Product" id="productResultSet">
		<id column="PRODUCT_NO" property="productNo"/>
		<result column="PRODUCT_NAME" property="productName"/>
		<result column="PRODUCT_PRICE" property="productPrice"/>
		<result column="PRODUCT_STOCK" property="productStock"/>
		<result column="PRODUCT_ONELINE" property="productOneLine"/>
		<result column="PRODUCT_TYPE" property="productType"/>
		<result column="BOARD_CONTENT" property="boardContent"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="MODIFY_DATE" property="modifyDate"/>
		<result column="PRODUCT_STATUS" property="productStatus"/>
		<result column="BOARD_COUNT" property="boardCount"/>
		<result column="REVIEW_COUNT" property="reviewCount"/>
		<result column="SCRAP_COUNT" property="scrapCount"/>
		<result column="BOARD_STATUS" property="boardStatus"/>
		<result column="ADMIN_ID" property="adminId"/>
		<result column="ADMIN_NAME" property="adminName"/>
		
		<result column="TOTAL_AVG" property="totalAvg"/>
		<result column="RECOMMEND_AVG" property="recommendAvg"/>
		<result column="REORDER_AVG" property="reorderAvg"/>
		<result column="SPICY_AVG" property="spicyAvg"/>
		<result column="SWEET_AVG" property="sweetAvg"/>
		<result column="BITTER_AVG" property="bitterAvg"/>
		<result column="SALTY_AVG" property="saltyAvg"/>
		<result column="SOUR_AVG" property="sourAvg"/>

	</resultMap>

	<!-- 상품 이미지 리스트 조회 -->
	<select id="getProductImgList" resultMap="imageResultSet">
		select *
		from image
		where board_type = 1
	</select>

	<resultMap type="Image" id="imageResultSet">
		<id column="IMAGE_NO" property="imageNo" />
		<result column="CHANGE_NAME" property="changeName" />
		<result column="FILE_PATH" property="filePath" />
		<result column="FILE_LEVEL" property="fileLevel" />
		<result column="FILE_TYPE" property="fileType" />
		<result column="IDENTIFY_NO" property="identifyNo" />
	</resultMap>

	<!-- 시식 신청 게시판 등록 -->
	<insert id="registerTaste">
		insert into taste_board
		values(seq_tid.nextval,
		default, #{endDate}, default, default, #{productNo}, #{adminId}, default)
	</insert>

	<!-- 시식 신청 게시글 리스트 조회 -->
	<select id="selectTaste" resultMap="tasteResultSet">
		select *
		from taste_board
		join
		product using(product_no)
		<if test='boardCheck == false'>
		where admin_status='Y'
		</if>
		<if test='boardCheck == true'>
		where board_status='Y'
		</if>
		<if test='value == null or value.equals("tasteNo")'>
		order by taste_no
		</if>
		<if test='value != null and value.equals("applyCount")'>
		order by apply_count desc
		</if>
		<if test='value != null and value.equals("productName")'>
		order by product_name asc
		</if>
		<if test='value != null and value.equals("endDate")'>
		order by end_date desc
		</if>
		
		
	
	</select>

	<resultMap type="ApplyTaste" id="tasteResultSet">
		<id column="TASTE_NO" property="tasteNo" />
		<result column="START_DATE" property="startDate" />
		<result column="END_DATE" property="endDate" />
		<result column="TASTE_ING" property="tasteIng" />
		<result column="BOARD_STATUS" property="boardStatus" />
		<result column="PRODUCT_NO" property="productNo" />
		<result column="ADMIN_ID" property="adminId" />
		<result column="PRODUCT_NAME" property="productName" />
		<result column="APPLY_COUNT" property="applyCount" />

	</resultMap>

	<!-- 시식 신청 게시글 진행상황 조회 -->
	<select id="checkTasteIng" resultType="_int">
		select count(*)
		from
		taste_board
		where product_no=#{productNo} and board_status = 'Y' and
		taste_ing = 1
	</select>

	<!-- 시식 종료 변경 -->
	<update id="endApplyTaste">
		update taste_board
		set taste_ing = 2
		where taste_no = #{tasteNo}

	</update>

	<!-- 시식 신청글 수정 -->
	<update id="updateTaste">
		update taste_board
		set end_date=#{endDate},
		taste_Ing=#{tasteIng}
		where taste_no = #{tasteNo}
	</update>
	<resultMap type="ProductRequest" id="requestProductResultSet">
		<id column="REQUEST_NO" property="requestNo" />
		<result column="REQUEST_PRODUCT" property="productName" />
		<result column="MANUFACTURER" property="manufacturer" />
		<result column="CREATE_DATE" property="createDate" />
		<result column="EMAIL_ID" property="email" />
	</resultMap>

	<!-- 상품요청 정보 저장 -->
	<insert id="insertRequestProduct">
		insert into product_request
		values
		(seq_reqid.nextval,#{productName},#{manufacturer},default,#{email})
	</insert>

	<!-- 상품요청 리스트 불러오기 -->
	<select id="selectRequestProductList" resultMap="requestProductResultSet">
		select * 
		from product_request
		<if test='value == null or value.equals("requestNo")'>
		order by request_no asc
		</if>
		<if test='value != null and value.equals("productName")'>
		order by request_product asc
		</if>
		<if test='value != null and value.equals("createDate")'>
		order by create_date desc
		</if>
	</select>

	<!-- 상품 이미지 삭제 -->
	<delete id="delImage">
		delete image
		where image_no = #{delProductImgNo}
	</delete>

	<!-- 상품 테이블 및 상품 게시판 테이블 수정 -->
	<update id="updateProduct" statementType="CALLABLE">
		{#{result, mode=OUT,
		jdbcType=INTEGER} = call updateproductfn(#{product.productNo},
		#{product.productName}, #{product.productPrice},
		#{product.productStock}, #{product.productOneLine},
		#{product.productType}, #{product.boardContent}, #{product.adminId})}
	</update>

	<!-- 사용자 게시판 게시물 삭제 -->
	<update id="deleteUserBoard">
		<choose>
			<when test="type.equals('product')">
				update pr_board
				<if test="bool.equals('true')">
					set board_status = 'Y'
				</if>
				<if test="bool.equals('false')">
					set board_status = 'N'
				</if>
				where product_no = #{pno}
			</when>
			<when test="type.equals('taste')">
				update taste_board
				<if test="bool.equals('true')">
					set board_status = 'Y'
				</if>
				<if test="bool.equals('false')">
					set board_status = 'N'
				</if>
				where product_no = #{pno}
			</when>
		</choose>
	</update>
	
	<!--관리자 게시판 게시물 삭제 -->
	<update id="deleteAdminBoard">
		<choose>
			<when test="type.equals('product')">
				update product
				set product_status = 'N'
				where product_no = #{pno}
			</when>
			<when test="type.equals('taste')">
				update taste_board
				set admin_status = 'N'
				where product_no = #{pno}
			</when>
		</choose>
	</update>




	<select id="getApplyPersonList" resultMap="applyTastePersonResultSet">
		select *
		from apply_t
		join member using(email_id)
		join Taste_board using(taste_no)
		join product using(product_no)
		<if test="value == null or value.equals('applyNo')">
		order by apply_no desc
		</if>
		<if test="value != null and value.equals('applyDate')">
		order by apply_date desc
		</if>
		<if test="value != null and value.equals('productName')">
		order by product_name asc
		</if>
	</select>

	<resultMap type="ApplyPerson" id="applyTastePersonResultSet">
		<id column="APPLY_NO" property="applyNo" />
		<result column="ADDRESS" property="address" />
		<result column="PHONE" property="phone" />
		<result column="EMAIL_ID" property="emailId" />
		<result column="TASTE_NO" property="tasteNo" />
		<result column="APPLY_DATE" property="applyDate" />
		<result column="PRODUCT_NAME" property="productName" />
		<result column="USER_NAME" property="name" />
	</resultMap>
</mapper>
